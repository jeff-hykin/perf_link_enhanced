import { html, css, getColorForPercent } from '../utils.js'

const Bar = tests => (test, i) => {
  const max = Math.max(...tests.map(x => x.ops))
  const percent = test.ops ? (test.ops / max) * 100 : 0
  return html`
    <div className=${style.result}>
      <div className=${style.bar}>
        <span
          style=${{
            width: '3px',
            transition: 'height 0.3s, background 0.3s',
            height: `${test.ops === -1 ? 100 : test.ops === -2 ? 0 : percent}%`,
            background:
              test.ops === -1
                ? getColorForPercent(0)
                : getColorForPercent(percent / 100),
          }}
        ></span>
      </div>
      <p className=${style.id}>${i + 1}</p>
      <div className=${style.label}>
        ${test.ops === -1 || test.ops === -2
          ? `${0}%`
          : test.ops === 0
          ? html`
              <img className=${style.spinner} src="/spinner.gif" />
            `
          : `${percent << 0}%`}
      </div>
    </div>
  `
}

let xUseLogScale = true
let yUseLogScale = false
export default ({ state, dispatch }) => {
  const { tests, title, started, resultsPerCondition } = state
    var resultsPerConditionExample = [
        [
            [1, null],
            [
                {
                    name: "Find item 100",
                    code: "data.find(x => x == 100)",
                    runs: [2723000, 216000, 151000, 275000, 53000, 328000, 196000, 90000, 2375000, 153000, 189000, 240000, 875000, 35000, 2000, 210000, 311000, 470000, 47000, 454000, 372000, 98000, 86000, 62000, 334000, 16000, 5000, 2631000, 2631000, 16000, 138000, 74000, 249000, 11000, 159000, 445000, 118000, 2833000, 45000, 98000, 2296000, 2631000, 1336000, 2308000, 1000, 302000, 131000, 10000, 657000, 47000, 214000, 117000, 2532000, 9000, 381000, 98000, 1000, 2631000, 2441000, 159000, 136000, 1870000, 10000, 65000, 9000, 1933000, 43000, 438000, 1000, 4626000, 199000, 663000, 676000, 452000, 3419000, 10000, 92000, 10000, 1351000, 1660000, 182000, 197000, 198000, 789000, 2098000, 305000, 233000, 1000, 203000, 9000, 513000, 493000, 1000, 2000, 13000, 297000, 133000, 61000, 483000, 425000],
                    ops: 624150,
                },
                {
                    name: "Find item 200",
                    code: "data.find(x => x == 200)",
                    runs: [1845000, 2123000, 2021000, 1000, 1502000, 178000, 42000, 1000, 593000, 88000, 1000, 1039000, 1000, 37000, 72000, 55000, 119000, 201000, 10000, 167000, 407000, 77000, 21000, 84000, 149000, 8000, 17000, 154000, 1000, 9000, 1000, 1000, 115000, 2303000, 33000, 160000, 1244000, 1557000, 666000, 75000, 1539000, 1194000, 255000, 1347000, 8000, 68000, 60000, 1000, 1583000, 59000, 11000, 476000, 1463000, 1000, 1000, 108000, 156000, 221000, 26000, 50000, 94000, 267000, 266000, 2000, 37000, 858000, 160000, 1000, 15000, 115000, 100000, 1015000, 1825000, 1879000, 98000, 1227000, 839000, 114000, 33000, 1244000, 111000, 584000, 33000, 10000, 9000, 1410000, 220000, 142000, 124000, 1000, 113000, 174000, 2406000, 9000, 1898000, 1000, 32000, 143000, 169000, 2000],
                    ops: 435850,
                },
                {
                    name: "Find item 400",
                    code: "data.find(x => x == 400)",
                    runs: [309000, 270000, 76000, 327000, 10000, 47000, 59000, 1000, 140000, 74000, 1000, 6000, 157000, 9000, 21000, 71000, 61000, 366000, 1000, 1000, 43000, 318000, 533000, 37000, 78000, 19000, 1000, 72000, 338000, 189000, 1000, 22000, 11000, 269000, 19000, 66000, 42000, 1000, 9000, 20000, 395000, 19000, 98000, 243000, 1000, 43000, 9000, 22000, 189000, 84000, 24000, 97000, 407000, 106000, 69000, 512000, 128000, 117000, 5000, 23000, 33000, 222000, 399000, 204000, 131000, 169000, 2000, 105000, 6000, 31000, 34000, 18000, 6000, 106000, 134000, 223000, 82000, 10000, 16000, 201000, 45000, 130000, 19000, 1000, 2000, 73000, 39000, 128000, 7000, 27000, 305000, 92000, 521000, 1000, 2000, 112000, 4000, 34000, 66000, 137000],
                    ops: 105630,
                },
                {
                    name: "Find item 800",
                    code: "data.find(x => x == 800)",
                    runs: [187000, 1000, 1000, 172000, 1000, 226000, 26000, 1000, 14000, 109000, 1000, 98000, 1000, 10000, 224000, 3000, 59000, 51000, 48000, 1000, 25000, 101000, 222000, 255000, 98000, 2000, 299000, 38000, 1000, 68000, 5000, 1000, 41000, 217000, 21000, 38000, 20000, 2000, 6000, 7000, 273000, 74000, 122000, 133000, 44000, 11000, 1000, 1000, 128000, 16000, 16000, 13000, 30000, 57000, 38000, 19000, 69000, 1000, 29000, 2000, 15000, 2000, 82000, 234000, 14000, 16000, 7000, 1000, 107000, 15000, 34000, 34000, 9000, 66000, 13000, 150000, 83000, 9000, 8000, 98000, 40000, 53000, 234000, 5000, 17000, 28000, 45000, 47000, 4000, 77000, 232000, 237000, 237000, 14000, 28000, 76000, 9000, 35000, 32000, 62000],
                    ops: 62870,
                },
            ],
        ],
        [
            [2, null],
            [
                {
                    name: "Find item 100",
                    code: "data.find(x => x == 100)",
                    runs: [625000, 2547000, 2631000, 29000, 337000, 15000, 1374000, 34000, 766000, 1000, 30000, 1000, 89000, 257000, 401000, 77000, 42000, 1000, 379000, 230000, 94000, 1000, 389000, 926000, 42000, 3913000, 453000, 4101000, 59000, 1929000, 14000, 1174000, 321000, 2341000, 2274000, 140000, 1000, 82000, 108000, 2000, 1000, 10000, 150000, 1435000, 321000, 213000, 1000, 290000, 1293000, 3497000, 3913000, 570000, 2631000, 2949000, 244000, 3675000, 268000, 1889000, 124000, 48000, 98000, 138000, 38000, 675000, 1422000, 396000, 388000, 1000, 255000, 52000, 331000, 451000, 3861000, 10000, 226000, 97000, 418000, 2940000, 16000, 2507000, 2075000, 312000, 1836000, 9000, 385000, 260000, 1646000, 171000, 60000, 156000, 315000, 2977000, 1000, 173000, 1778000, 163000, 411000, 3911000, 191000, 265000],
                    ops: 831670,
                },
                {
                    name: "Find item 200",
                    code: "data.find(x => x == 200)",
                    runs: [770000, 67000, 1000, 23000, 1646000, 4000, 245000, 54000, 1887000, 1000, 9000, 2955000, 413000, 1668000, 155000, 1813000, 9000, 148000, 74000, 117000, 54000, 1000, 116000, 467000, 33000, 2395000, 17000, 53000, 1966000, 1000, 66000, 1680000, 1595000, 269000, 1642000, 2075000, 1000, 98000, 76000, 1056000, 9000, 1188000, 63000, 507000, 2000, 30000, 1171000, 1000, 254000, 95000, 1000, 87000, 318000, 6000, 64000, 133000, 112000, 1095000, 62000, 30000, 9000, 16000, 18000, 325000, 1062000, 212000, 51000, 2000, 250000, 1607000, 1440000, 211000, 2726000, 14000, 111000, 52000, 198000, 1607000, 20000, 1449000, 171000, 9000, 1436000, 152000, 7000, 49000, 44000, 187000, 1378000, 74000, 139000, 19000, 57000, 47000, 9000, 98000, 141000, 85000, 98000, 165000],
                    ops: 466930,
                },
                {
                    name: "Find item 400",
                    code: "data.find(x => x == 400)",
                    runs: [58000, 1000, 83000, 61000, 1000, 22000, 323000, 78000, 65000, 69000, 9000, 449000, 91000, 68000, 4000, 126000, 1000, 1000, 10000, 61000, 73000, 64000, 5000, 53000, 13000, 99000, 43000, 494000, 541000, 1000, 48000, 272000, 5000, 247000, 320000, 46000, 305000, 32000, 42000, 381000, 250000, 585000, 448000, 141000, 437000, 15000, 1000, 387000, 57000, 260000, 26000, 63000, 98000, 471000, 49000, 72000, 500000, 203000, 22000, 1000, 15000, 484000, 384000, 52000, 83000, 113000, 1000, 439000, 90000, 102000, 166000, 121000, 529000, 271000, 55000, 9000, 94000, 255000, 320000, 313000, 71000, 82000, 130000, 261000, 43000, 186000, 70000, 167000, 271000, 44000, 83000, 11000, 487000, 6000, 67000, 57000, 1000, 3000, 133000, 79000],
                    ops: 148990,
                },
                {
                    name: "Find item 800",
                    code: "data.find(x => x == 800)",
                    runs: [9000, 15000, 4000, 11000, 20000, 8000, 19000, 9000, 43000, 15000, 2000, 291000, 33000, 1000, 35000, 22000, 84000, 67000, 85000, 35000, 223000, 3000, 40000, 127000, 128000, 2000, 60000, 1000, 127000, 136000, 186000, 154000, 111000, 141000, 118000, 33000, 1000, 10000, 24000, 77000, 84000, 99000, 242000, 4000, 141000, 9000, 142000, 1000, 288000, 26000, 168000, 23000, 16000, 223000, 88000, 25000, 26000, 104000, 19000, 1000, 39000, 239000, 4000, 56000, 71000, 154000, 57000, 1000, 29000, 72000, 81000, 58000, 216000, 13000, 140000, 94000, 45000, 120000, 213000, 119000, 6000, 41000, 85000, 36000, 46000, 122000, 39000, 30000, 254000, 23000, 30000, 238000, 3000, 7000, 17000, 13000, 29000, 1000, 26000, 3000],
                    ops: 71090,
                },
            ],
        ],
        [
            [3, null],
            [
                {
                    name: "Find item 100",
                    code: "data.find(x => x == 100)",
                    runs: [16000, 3443000, 302000, 196000, 3218000, 2460000, 2000, 1078000, 1482000, 312000, 52000, 17000, 2631000, 1252000, 345000, 71000, 106000, 273000, 240000, 1000, 1000, 2631000, 1939000, 90000, 1908000, 267000, 1000, 105000, 131000, 292000, 2440000, 2590000, 873000, 252000, 91000, 2631000, 954000, 85000, 3871000, 34000, 859000, 66000, 65000, 15000, 2631000, 115000, 1863000, 36000, 1000, 3335000, 639000, 2000, 3413000, 3860000, 395000, 268000, 2733000, 36000, 2170000, 98000, 1000, 45000, 10000, 33000, 2763000, 272000, 8000, 415000, 112000, 3051000, 159000, 2631000, 156000, 397000, 19000, 1300000, 2681000, 21000, 180000, 1864000, 124000, 123000, 438000, 469000, 39000, 158000, 149000, 121000, 3320000, 314000, 98000, 1000, 201000, 2732000, 1047000, 3073000, 4449000, 155000, 3316000, 3114000],
                    ops: 1008420,
                },
                {
                    name: "Find item 200",
                    code: "data.find(x => x == 200)",
                    runs: [1075000, 15000, 2140000, 2000, 79000, 2026000, 167000, 1162000, 503000, 1000, 28000, 1946000, 2000, 870000, 115000, 1000, 145000, 122000, 97000, 1499000, 1154000, 41000, 881000, 233000, 702000, 89000, 1000, 18000, 2359000, 46000, 8000, 1449000, 174000, 2404000, 604000, 10000, 2139000, 98000, 2527000, 1717000, 378000, 41000, 330000, 212000, 4000, 28000, 1095000, 2231000, 142000, 1988000, 1000, 57000, 1511000, 1000, 218000, 141000, 2356000, 1157000, 1508000, 69000, 114000, 34000, 1000, 8000, 1646000, 1535000, 46000, 197000, 2305000, 98000, 327000, 169000, 58000, 206000, 729000, 432000, 1837000, 100000, 28000, 1646000, 145000, 124000, 145000, 238000, 485000, 1052000, 79000, 934000, 1646000, 139000, 63000, 2000, 1261000, 1805000, 13000, 100000, 1000, 38000, 1876000, 2043000],
                    ops: 658220,
                },
                {
                    name: "Find item 400",
                    code: "data.find(x => x == 400)",
                    runs: [115000, 536000, 19000, 115000, 249000, 72000, 49000, 114000, 5000, 301000, 16000, 329000, 267000, 36000, 5000, 4000, 13000, 78000, 33000, 1000, 151000, 356000, 262000, 306000, 77000, 74000, 1000, 17000, 1000, 41000, 136000, 15000, 114000, 69000, 46000, 75000, 40000, 28000, 447000, 1000, 196000, 19000, 186000, 57000, 2000, 4000, 516000, 9000, 320000, 60000, 25000, 395000, 389000, 130000, 1000, 498000, 1000, 17000, 165000, 2000, 396000, 23000, 2000, 255000, 57000, 365000, 87000, 101000, 10000, 65000, 159000, 91000, 34000, 112000, 58000, 45000, 401000, 426000, 34000, 55000, 1000, 3000, 79000, 38000, 122000, 98000, 348000, 133000, 457000, 64000, 48000, 346000, 113000, 125000, 354000, 9000, 134000, 29000, 354000, 384000],
                    ops: 136210,
                },
                {
                    name: "Find item 800",
                    code: "data.find(x => x == 800)",
                    runs: [1000, 149000, 186000, 1000, 1000, 4000, 81000, 27000, 92000, 91000, 118000, 131000, 58000, 298000, 5000, 123000, 17000, 245000, 30000, 36000, 49000, 127000, 87000, 73000, 17000, 37000, 264000, 149000, 1000, 10000, 120000, 11000, 24000, 3000, 63000, 2000, 38000, 10000, 217000, 9000, 10000, 13000, 1000, 128000, 269000, 2000, 231000, 1000, 214000, 232000, 11000, 3000, 221000, 75000, 34000, 40000, 203000, 2000, 134000, 8000, 26000, 269000, 60000, 160000, 37000, 104000, 63000, 67000, 1000, 55000, 98000, 35000, 16000, 61000, 5000, 11000, 1000, 9000, 7000, 87000, 9000, 1000, 270000, 1000, 29000, 2000, 8000, 107000, 261000, 13000, 86000, 247000, 19000, 188000, 134000, 29000, 35000, 23000, 212000, 186000],
                    ops: 78690,
                },
            ],
        ],
    ]

    const testSeries = {}
    for (let [[dimension1, _], testRuns] of resultsPerCondition||[]) {
        for (let { name, ops } of testRuns) {
            if (!testSeries[name]) {
                testSeries[name] = {
                    x: [],
                    y: [],
                    name: name,
                    mode: "lines+markers",
                    type: "scatter",
                }
            }

            testSeries[name].x.push(dimension1)
            testSeries[name].y.push(ops)
        }
    }

    // Convert testSeries object to array of traces
    const traces = Object.values(testSeries)

    // Plot the chart
    const id = `plotly-graph-${Math.random()}`
    let element = html`<div style="margin-bottom: -1rem" id=${id}></div>`
    const updatePlot = () => {
        if (document.getElementById(id)) {
            Plotly.newPlot(id, traces, {
                legend: {
                    orientation: 'h',    // horizontal layout
                    yanchor: 'bottom',   // anchor legend box to bottom of the legend
                    y: 1.1,              // place it slightly above the plot area
                    xanchor: 'center',
                    x: 0.5               // center the legend horizontally
                },
                template: 'plotly_dark',
                // title: {
                //     text: 'Operations by Test and Dimension',
                //     font: { color: '#acacae' }
                // },
                xaxis: {
                    type: xUseLogScale ? 'log' : 'linear',
                    title: { text: 'Dimension1', font: { color: '#acacae' } },
                    tickfont: { color: '#acacae' },
                    gridcolor: '#2f3037'
                },
                yaxis: {
                    type: yUseLogScale ? 'log' : 'linear',
                    title: { text: 'Number of Ops (higher is better)', font: { color: '#acacae' } },
                    tickfont: { color: '#acacae' },
                    gridcolor: '#2f3037'
                },
                paper_bgcolor: '#25262a',
                plot_bgcolor: '#25262a'
            }).then(()=>{
                const modebar = document.getElementById(id).querySelector('.modebar-container');
                if (modebar) {
                    modebar.style.top = 'unset';
                    modebar.style.bottom = '0px';   // Adjust as needed
                    modebar.style.right = '0px';
                    modebar.style.left = 'unset';
                }
            })
        }
    }
    setTimeout(() => updatePlot(), 300)

  return html`
    <aside className=${style.aside}>
      <div className=${style.graph}>
        ${tests.filter(x => x.ops !== -2).map(Bar(tests))}
      </div>
      <input
        className=${style.title}
        onInput=${e => dispatch({ title: e.target.value })}
        value=${title}
      />
      ${element}
      <div style="position: absolute; bottom: 0rem; left: 1rem; color: gray;" >
        <div>
          <input type="checkbox" checked="${xUseLogScale}" onChange=${(e) =>{xUseLogScale = e.target.checked;updatePlot()}}/>
          <span> </span>
          <span>X-axis log scale</span>
        </div>
        <div style="margin-left: 0;">
          <input type="checkbox" checked="${yUseLogScale}" onChange=${(e) =>{yUseLogScale = e.target.checked;updatePlot()}}/>
          <span> </span>
          <span>Y-axis log scale</span>
        </div>
      </div>
    </aside>
  `
}

const style = {
  aside: css`
    grid-area: graph;

    display: flex;
    flex-direction: column;
    justify-content: center;

    padding: 1rem 1rem 1rem;
    overflow-x: auto;
    max-width: 100vw;

    & div > div + div {
      margin-left: 1rem;
    }
  `,
  graph: css`
    margin: 0 auto;
    flex: 1 1 100%;
    padding: 3rem 3rem 3rem;
    display: flex;
  `,
  title: css`
    text-align: center;
    width: 100%;
    background: none;
    border: none;
    color: rgba(255, 255, 255, 0.62);
    font-size: 1.2rem;
    flex: none;
    padding: 0;
    font-weight: bold;
    min-width: 0;
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
    outline: none;
    max-width: 100%;
  `,
  result: css`
    display: flex;
    flex-direction: column;
    align-items: center;
  `,
  bar: css`
    display: flex;
    align-items: flex-end;
    background: rgba(0, 0, 0, 0.1);
    height: 100%;
    border-radius: 5px;
    overflow: hidden;
  `,
  label: css`
    width: 3rem;
    margin-top: 1rem;
    height: 1rem;
    text-align: center;
    font-weight: 100;
    color: rgba(255, 255, 255, 0.5);
  `,
  spinner: css`
    width: 1rem;
    height: 1rem;
    opacity: 0.5;
  `,
  id: css`
    width: 2rem;
    height: 2rem;
    flex: none;
    background: rgba(0, 0, 0, 0.2);
    color: rgba(255, 255, 255, 0.62);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-top: 1rem;
  `,
}
